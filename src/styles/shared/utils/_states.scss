@import '~sassdash/index';
@import 'selectors';

$states: (
  hover:      '&.is-hovered',
  focus:      '&.is-focused',
  focusable:  '&.is-focusable',
  active:     '&.is-active',
  valid:      '&.is-valid',
  invalid:    '&.is-invalid',
  checked:    '&.is-checked',
  required:   '&.is-required',
  disabled:   '&.is-disabled, fieldset.is-disabled &',
  hidden:     '&.is-hidden',

  progress:   '&.in-progress',
  loaded:     '&.is-loaded',
  success:    '&.is-success',
  info:       '&.is-info',
  warning:    '&.is-warning',
  danger:     '&.is-danger',
  invisible:  '&.is-invisible',
  expandable: '&.is-expandable',
  expanded:   '&.is-expanded',
  collapsable:'&.is-collapsable',
  collapsed:  '&.is-collapsed',
) !default;

$required-states: (
  normal:        '&',
  hover:         '&:hover',
  focus:         '&:focus',
  active:        '&:active',
  link:          '&:link',
  visited:       '&:visited',
  valid:         '&:valid',
  invalid:       '&:invalid',
  checked:       '&:checked, &[checked]',
  indeterminate: '&:indeterminate',
  required:      '&[required]',
  disabled:      '&[disabled], fieldset[disabled] &',
  hidden:        '&[hidden], [hidden] &',
);

$get-states-selectors-memo: () !default;
@function get-states-selectors ($needed-states...) {
  $memo-key: inspect($needed-states);
  @if map-has-key($get-states-selectors-memo, $memo-key) {
    @return map-get($get-states-selectors-memo, $memo-key);
  }

  $states-values: ();

  @each $state in $needed-states {
    @if (map-has-key($required-states, $state) or map-has-key($states, $state)) {
      @if (map-has-key($required-states, $state)) {
        $state-value: map-get($required-states, $state);
        @if ($state-value != null) {
          $states-values: join($states-values, parse-selectors($state-value), comma);
        }
      }

      @if (map-has-key($states, $state)) {
        $state-value: map-get($states, $state);
        @if ($state-value != null) {
          $states-values: join($states-values, parse-selectors($state-value), comma);
        }
      }
    } @else {
      $states-values: join($states-values, parse-selectors($state), comma);
    }
  }

  $tmp: ();
  @each $selector in parse-selectors(&) {
    $parents: _drop-right($selector, 1);
    $element: _last($selector);

    @each $state-value in $states-values {
      $rule: _replace($state-value, '&', $element);

      $state-selector: '#{$parents} #{$rule}';
      $state-selector: cleanup-selectors($state-selector);

      $tmp: append($tmp, $state-selector, comma);
    }
  }
  $states-selectors: $tmp;

  $get-states-selectors-memo: map-merge($get-states-selectors-memo, (
    $memo-key: $states-selectors
  )) !global;

  @return $states-selectors;
}

@mixin state-is ($needed-states...) {
  @at-root #{get-states-selectors($needed-states)} {
    @content;
  }
}

@mixin is ($needed-states...) {
  @include state-is ($needed-states...) {
    @content;
  }
}
