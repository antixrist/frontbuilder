@import '~sassdash/index';
@import 'selectors';

$states: (
  hover:      '&.is-hovered',
  focus:      '&.is-focused',
  focusable:  '&.is-focusable',
  active:     '&.is-active',
  valid:      '&.is-valid',
  invalid:    '&.is-invalid',
  checked:    '&.is-checked',
  required:   '&.is-required',
  disabled:   '&.is-disabled, fieldset.is-disabled &',
  hidden:     '&.is-hidden',

  progress:   '&.in-progress',
  loaded:     '&.is-loaded',
  success:    '&.is-success',
  info:       '&.is-info',
  warning:    '&.is-warning',
  danger:     '&.is-danger',
  invisible:  '&.is-invisible',
  expandable: '&.is-expandable',
  expanded:   '&.is-expanded',
  collapsable:'&.is-collapsable',
  collapsed:  '&.is-collapsed',
) !default;

$required-states: (
  normal:        '&',
  hover:         '&:hover',
  focus:         '&:focus',
  active:        '&:active',
  link:          '&:link',
  visited:       '&:visited',
  valid:         '&:valid',
  invalid:       '&:invalid',
  checked:       '&:checked, &[checked]',
  indeterminate: '&:indeterminate',
  required:      '&[required]',
  disabled:      '&[disabled], fieldset[disabled] &',
  hidden:        '&[hidden], [hidden] &',
);

@function get-states-selectors ($needed-states, $context: null) {
  $states-selectors: ();

  @each $state in $needed-states {
    @if (map-has-key($required-states, $state) or map-has-key($states, $state)) {
      @if (map-has-key($required-states, $state)) {
        $selector: map-get($required-states, $state);
        @if ($selector != null) {
          $states-selectors: join($states-selectors, parse-selectors($selector), comma);
        }
      }

      @if (map-has-key($states, $state)) {
        $selector: map-get($states, $state);
        @if ($selector != null) {
          $states-selectors: join($states-selectors, parse-selectors($selector), comma);
        }
      }
    } @else {
      $states-selectors: join($states-selectors, parse-selectors($state), comma);
    }
  }

  @if $context != null {
    $tmp: ();
    @each $selector in $context {
      @each $state-selector in $states-selectors {
        $parents: _drop-right($selector, 1);
        $element: _last($selector);

        $state-selector: _replace($state-selector, '&', $element);
        $state-selector: $parents $state-selector;

        $tmp: append($tmp, $state-selector, comma);
      }
    }
    $states-selectors: $tmp;
  }

  @return $states-selectors;
}

@mixin state-is ($needed-states...) {
  $states-values: ();

  @each $state in $needed-states {
    @if (map-has-key($required-states, $state) or map-has-key($states, $state)) {
      @if (map-has-key($required-states, $state)) {
        $state-value: map-get($required-states, $state);
        @if ($state-value != null) {
          $states-values: join($states-values, parse-selectors($state-value), comma);
        }
      }

      @if (map-has-key($states, $state)) {
        $state-value: map-get($states, $state);
        @if ($state-value != null) {
          $states-values: join($states-values, parse-selectors($state-value), comma);
        }
      }
    } @else {
      $states-values: join($states-values, parse-selectors($state), comma);
    }
  }

  //@debug('== $states-values: #{$states-values}');
  //@debug('== parse-selectors(&): #{parse-selectors(&)}');

  $tmp: ();
  @each $selector in parse-selectors(&) {
    //@debug('$selector: #{$selector}');

    $parents: _drop-right($selector, 1);
    $element: _last($selector);

//@debug('
//  $parents: #{$parents}
//  $element: #{$element}
//  $states-values: #{$states-values}
//');

    @each $state-value in $states-values {
      $rule: _replace($state-value, '&', $element);

      //$rule: _last($element);
      //$rule-states: rule-states($rule);
      //$rule-states: if(_is-list($rule-states), $rule-states, ($rule-states,));
      //$rule-states: if(length($rule-states) > 0, ':#{_join($rule-states, ':')}', '');
      //$state-selector: rule-without-states($element);
      //$state-selector: _replace($state-selector, '&', $element);

      //@debug('= $rule: #{$rule}');

      $state-selector: '#{$parents} #{$rule}';
      $state-selector: cleanup-selectors($state-selector);

      $tmp: append($tmp, $state-selector, comma);
    }
  }
  $states-selectors: $tmp;

  //@debug('=== $states-selectors: #{inspect($states-selectors)}');

  @at-root #{$states-selectors} {
    @content;
  }
}

@mixin is ($states...) {
  @include state-is ($states...) {
    @content;
  }
}

.block-type-1,
.block-type-2 {

  .block-item,
  .block-item--variant {

    &:first-child {
      &:after {
        border-top: none;

        //&:hover[checked] {
        //  //@debug('&: #{parse-selectors(&)}');
        //  $sels: cleanup-selectors(&);
        //  //@debug('$sels: #{$sels}');
        //}
      }


      @include state-is (hover, checked) {
        background: #f00;
        @include state-is (active, focus) {
          background: #00f;

          @include sibling-self {
            background: #0f0;

            //@include state-is (active) {
            //  color: #0f0;
            //
            //  .inner {
            //    padding: 10px;
            //
            //    &:before {
            //      content: '54321';
            //    }
            //  }
            //}
          }
        }
      }
    }
  }
}
