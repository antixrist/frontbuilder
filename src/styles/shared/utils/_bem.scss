//@import '~SassMagic';
@import '~sassdash/index';
//@import 'selectors';
@import 'states';


/// BEM
/// @access public
/// @author Marcmintel
/// @link https://medium.com/@marcmintel/pushing-bem-to-the-next-level-with-sass-3-4-5239d2371321

$bem-element-separator: '__' !default;
$bem-modifier-separator: '--' !default;

/**
 * Return whether the last rule in the given selector is a modifier
 */
@function lastRuleIsModifier($selector) {
  $lastRule: _last(rules($selector));

  @if(str-index($lastRule, $bem-modifier-separator)) {
    @return true;
  }
  @else {
    @return false;
  }
}

/**
 * Return the last rule without the modifier
 */
@function lastRuleWithoutModifier($selector) {
  $lastRule: _last(rules($selector));
  @return _first(_split($lastRule, $bem-modifier-separator));
}

/// @access private
/// @param  {String}  $selector
/// @return {Boolean} `true` or `false`
@function containsModifier($selector) {
  $selector: selector-to-string($selector);
  @if str-index($selector, $bem-modifier-separator) {
    @return true;
  } @else {
    @return false;
  }
}

/// @param  {String}  $selector
/// @access private
/// @return {String}
@function getBlock($selector) {
  $selector: selector-to-string($selector);
  $modifierStart: str-index($selector, $bem-modifier-separator) - 1;
  @return str-slice($selector, 0, $modifierStart);
}

@mixin block($block) {
  .#{$block} {
    @content;
  }
}

/**
 * Append the given elements to the previous selector.
 * If the last rule was a modifier start a new rule from the point of the
 * modifier.
 *
 * Example:
 * [In]:  .foo__bar--zulu {
 *          @include element(alpha) { font-weight: 700; }
 *        }
 * [Out]: .foo__bar--zulu .foo__bar__alpha { font-weight: 700; }
 */
@mixin element($elements...) {
  $selector: stringify(&);

  @if(lastRuleIsModifier($selector)) {
    $withoutModifier: lastRuleWithoutModifier($selector);

    @at-root {
      #{$selector} {
        #{combined-rule($withoutModifier + $bem-element-separator, $elements)} {
          @content;
        }
      }
    }
  }
  @else {
    @at-root {
      #{combined-rule($selector + $bem-element-separator, $elements)} {
        @content;
      }
    }
  }
}

@function get-modifiers ($modifiers) {
  $selectors: ();

  @each $selector in parse-selectors(&) {
    $rules: ();
    @each $rule in selector-rules($selector) {
      $rules: append($rules, parse-rule($rule), comma);
    }

    $last-rule: _last($rules);
    $parents-rules: _drop-right($rules, 1);

    // todo: проверить
    $parents-rules-with-states: ();
    @each $rule in $parents-rules {
      @if (rule-has-states($rule)) {
        $rule: stringify-rule($rule);

        $parents-rules-with-states: append($parents-rules-with-states, $rule, comma);
      }
    }

    @each $modifier in $modifiers {
      $new-rule: $last-rule;
      $rule: map-get($new-rule, 'rule');

      $new-rule: map-merge($new-rule, (
        rule: #{$rule}#{$bem-modifier-separator}#{$modifier}
      ));
      $new-rule: '#{$parents-rules-with-states} #{stringify-rule($new-rule)}';
      $selectors: append($selectors, $new-rule, comma);
    }
  }

  @return $selectors;
}

@mixin m ($modifiers...) {
  @at-root {
    #{get-modifiers($modifiers)} {
      @content;
    }
  }
}


.qweqwe,
.asdqwe {
  color: black;

  .inner[checked]:invalid:before:hover {
    border-bottom: 1px solid;

    //@include state-is (hover, focus) {
      @include state-is (active) {
        background: #f00;
      //}

      @include m(dashed) {
        border-bottom: 1px dashed #0f0;

        @include state-is (hover) {
          background: #eee;
        }
      }
    }

  //  @include m(dashed) {
  //    border-bottom: 1px dashed #0f0;
  //
  //    @include state-is (hover, focus) {
  //      background: #eee;
  //    }
  //  }
  //
  //  @include state-is (invalid) {
  //    background: #f00;
  //
  //    @include m(dashed) {
  //      border-bottom-color: #f00;
  //
  //      @debug('
  //= dashed &: #{&}');
  //
  //      @include state-is (hover, focus) {
  //        background: #f00;
  //      }
  //    }
  //  }
  }
}
