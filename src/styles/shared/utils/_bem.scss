//@import '~SassMagic';
@import '~sassdash/index';
@import 'selectors';


.qweqwe,
.qweqwe-2 {
  .asdasd,
  .asdasd-2 {
    $selectors: parse-selectors((&, ('.zxczxc .ewqewq', '.zxczxc-3, .ewqewq-3'), '.zxczxc-4'));

    @debug('$selectors: #{inspect($selectors)}');

    @each $selector in $selectors {
      $rules: selector-rules($selector);
      @debug('$rules: #{list-separator($rules)} #{inspect($rules)}');
    }

    @at-root #{$selectors} {
      asdasdasd: 123;
    }
  }
}




//$splitted: _split($current, ':');
//$states: _drop($splitted, 1);
//$states: _join($states, ':');
//$states: if($states != '' and $states != null, ':#{$states}', null);

/// BEM
/// @access public
/// @author Marcmintel
/// @link https://medium.com/@marcmintel/pushing-bem-to-the-next-level-with-sass-3-4-5239d2371321

$bem-element-separator: '__' !default;
$bem-modifier-separator: '--' !default;

/**
 * Return whether the last rule in the given selector is a modifier
 */
@function lastRuleIsModifier($selector) {
  $lastRule: _last(rules($selector));

  @if(str-index($lastRule, $bem-modifier-separator)) {
    @return true;
  }
  @else {
    @return false;
  }
}

/**
 * Return the last rule without the modifier
 */
@function lastRuleWithoutModifier($selector) {
  $lastRule: _last(rules($selector));
  @return _first(str-explode($lastRule, $bem-modifier-separator));
}

/// @access private
/// @param  {String}  $selector
/// @return {Boolean} `true` or `false`
@function containsModifier($selector) {
  $selector: selector-to-string($selector);
  @if str-index($selector, $bem-modifier-separator) {
    @return true;
  } @else {
    @return false;
  }
}

/// @param  {String}  $selector
/// @access private
/// @return {String}
@function getBlock($selector) {
  $selector: selector-to-string($selector);
  $modifierStart: str-index($selector, $bem-modifier-separator) - 1;
  @return str-slice($selector, 0, $modifierStart);
}

@mixin block($block) {
  .#{$block} {
    @content;
  }
}

/**
 * Append the given elements to the previous selector.
 * If the last rule was a modifier start a new rule from the point of the
 * modifier.
 *
 * Example:
 * [In]:  .foo__bar--zulu {
 *          @include element(alpha) { font-weight: 700; }
 *        }
 * [Out]: .foo__bar--zulu .foo__bar__alpha { font-weight: 700; }
 */
@mixin element($elements...) {
  $selector: stringify(&);

  @if(lastRuleIsModifier($selector)) {
    $withoutModifier: lastRuleWithoutModifier($selector);

    @at-root {
      #{$selector} {
        #{combined-rule($withoutModifier + $bem-element-separator, $elements)} {
          @content;
        }
      }
    }
  }
  @else {
    @at-root {
      #{combined-rule($selector + $bem-element-separator, $elements)} {
        @content;
      }
    }
  }
}

@mixin modifier($modifier) {
  @at-root {
    #{&}#{$bem-modifier-separator + $modifier} {
      @content;
    }
  }
}
