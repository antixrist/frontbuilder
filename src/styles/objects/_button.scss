$btn-variants: (
  default: (
    color-normal: $color-primary,
    color-hover: #fff,
    color-focus: $color-primary,
    color-active: #fff,

    bg-color-normal: #fff,
    bg-color-hover: $color-primary,
    bg-color-focus: #fff,
    bg-color-active: $color-primary,
  ),
  primary: (
    color-normal: #fff,
    color-hover: #fff,
    color-active: #fff,

    bg-color-normal: $color-primary,
    bg-color-hover: darken($color-primary, 10%),
    bg-color-focus: $color-primary,
    bg-color-active: darken($color-primary, 10%),
  ),
  success: (
    color-normal: #fff,
    color-hover: #fff,
    color-active: #fff,

    bg-color-normal: $color-success,
    bg-color-hover: darken($color-success, 10%),
    bg-color-focus: $color-success,
    bg-color-active: darken($color-success, 10%)
  ),
  danger: (
    color-normal: #fff,
    color-hover: #fff,
    color-active: #fff,

    bg-color-normal: $color-danger,
    bg-color-hover: darken($color-danger, 10%),
    bg-color-focus: $color-danger,
    bg-color-active: darken($color-danger, 10%)
  ),
  secondary: (
    color-normal: $color-primary,
    color-hover: $color-primary,
    color-active: $color-primary,

    bg-color-normal: $borders-color,
    bg-color-hover: darken($borders-color, 10%),
    bg-color-focus: $borders-color,
    bg-color-active: darken($borders-color, 10%)
  )
) !default;

.btn {
  @include btn;

  @each $size, $data in $control-sizes {
    $selector: if($size == default, '&', '&.-size-#{$size}');
    #{$selector} { @include control-size-preset($size); }
  }

  @each $variant, $data in $btn-variants {
    $selector: if($variant == default, '&', '&.-#{$variant}');
    #{$selector} {
      $args: map-get($btn-variants, $variant);
      @include btn-variant($args...);
    }
  }

  border-radius: $base-radius;
  &.-square {
    border-radius: 0;
  }

  &.-wide {
    @include btn-wide;
  }
}

.float-buttons {
  display: inline-block;

  .btn {
    padding: 0;
    border: none;
    border-radius: 0;

    $btn-size: 47px 45px;
    $btn-size-map: get-sizes-map($btn-size);

    @include size($btn-size);
    @include control-size(0, 1px);
    line-height: map-get($btn-size-map, height);

    .inner {
      display: inline-block;

      &.-circle {
        border-width: 1px;
        border-style: solid;
        border-radius: 50%;
      }

      $size: 25px;
      $size-map: get-sizes-map($size);

      @include size($size);
      font-size: 20px;

      line-height: map-get($size-map, height) - 2;
      [class^="icon-"]:before, [class*=" icon-"]:before { line-height: map-get($size-map, height); }

      @include box(
        ((map-get($btn-size-map, height) - map-get($size-map, height)) /2)
        floor(((map-get($btn-size-map, width) - map-get($size-map, width)) /2)),
        x y, margin
      );
    }

    .counter {
      position: absolute;
      top: 0;
      right: 0;
      line-height: 1;
      font-size: 9px;
      border-bottom-left-radius: 8px;
      padding: 3px 3px 2px 4px;
    }

    &.-inner-sm .inner {
      $size: 18px;
      $size-map: get-sizes-map($size);

      @include size($size);
      font-size: 14px;
      font-weight: bold;

      line-height: map-get($size-map, height) - 2;
      [class^="icon-"]:before, [class*=" icon-"]:before { line-height: map-get($size-map, height); }

      @include box(
        ((map-get($btn-size-map, height) - map-get($size-map, height)) /2)
        floor(((map-get($btn-size-map, width) - map-get($size-map, width)) /2)),
        x y, margin
      );
    }

    @each $variant, $data in $btn-variants {
      $selector: if($variant == default, '&', '&.-#{$variant}');
      #{$selector} {
        $opts: map-get($btn-variants, $variant);
        $color:        map-get($opts, bg-color-normal);
        $color-hover:  map-get($opts, bg-color-hover);
        $color-focus:  map-get($opts, bg-color-hover);
        $color-active: map-get($opts, bg-color-active);

        @if $variant == default {
          $color:        map-get($opts, bg-color-hover);
          $color-hover:  map-get($opts, bg-color-hover);
          $color-focus:  map-get($opts, bg-color-hover);
          $color-active: map-get($opts, bg-color-active);
        }

        @if $variant == secondary {
          $color:        map-get($opts, color-normal);
          $color-hover:  map-get($opts, color-hover);
          $color-focus:  map-get($opts, color-focus);
          $color-active: map-get($opts, color-active);
        }

        .inner.-circle {
          color: $color;
          background: #fff;
          border-color: rgba($color, .4);
        }
        .counter {
          color: #fff;
          background: $color;
        }

        @include btn-hover  { .inner.-circle { color: $color-hover; } }
        @include btn-focus  { .inner.-circle { color: $color-focus; } }
        @include btn-active { .inner.-circle { color: $color-active; } }
      }
    }
  }

  @include stack(x, 0, '.btn');
  .btn + .btn { border-left: 1px solid $borders-color; }

  &.-y {
    @include stack(y, 0, '.btn');
    .btn { display: block; }
    .btn + .btn {
      border-left: none;
      border-top: 1px solid $borders-color;
    }
  }
}
