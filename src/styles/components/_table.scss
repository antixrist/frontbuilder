$table-cell-padding: 0.5rem 1rem !default;
$table-cell-padding-between: true !default;
$table-cell-padding-edges: false !default;
$table-border-color: #edeef0 !default;

@include c(table-responsive) {
  display: block;
  max-width: 100%;
  overflow-x: auto;
  overflow-y: hidden;
  -ms-overflow-style: -ms-autohiding-scrollbar; // See https://github.com/twbs/bootstrap/pull/10057
}

@mixin table-cells-spaces ($padding: 0, $options: between edges x y, $items: 'td, th') {
  $options: if(type-of($options) != list, ($options,), $options);
  $between: index($options, between);
  $edges: index($options, edges);
  $x: index($options, x);
  $y: index($options, y);

  @if not $x and not $y {
    $x: true;
    $y: true;
  }

  #{$items} {
    @if $x and $y and $between and $edges {
      padding: $padding;
    } @else {
      $bounds: get-bounds-map($padding);

      @if $x {
        @if $between and $edges {
          padding-left: map-get($bounds, left);
          padding-right: map-get($bounds, right);
        }
        @else {
          @if $edges and not $between {
            &:first-child { padding-left: map-get($bounds, left); }
            &:last-child { padding-right: map-get($bounds, right); }
          }
          @elseif not $edges and $between {
            &:first-child:not(:last-child) { padding-right: map-get($bounds, right); }
            &:last-child:not(:first-child) { padding-left: map-get($bounds, left); }
            &:not(:last-child):not(:first-child) {
              padding-left: map-get($bounds, left);
              padding-right: map-get($bounds, right);
            }
          }
        }
      }
      @if $y {
        @if $between and $edges {
          padding-top: map-get($bounds, top);
          padding-bottom: map-get($bounds, bottom);
        }
        @else {
          @if $edges and not $between {
            
          }
          @if not $edges and $between {

          }
        }
      }
    }
  }
}




@include c(table) {
  border: none;

  td, th {
    @include font-type(regular);
    text-align: left;
    border: none;
    vertical-align: top;
    padding: 0;
  }

  @include table-cells-spaces($table-cell-padding, between edges x);

  th { @include font-type(bold); }

  thead {
    th, td {
      &:first-child { }
      &:last-child { }
    }
    th { vertical-align: bottom; }
    td {  }

    tr {
      &:first-child {
        th, td {
          &:first-child { }
          &:last-child { }
        }
        th {  }
        td {  }
      }
      &:last-child {
        th, td {
          &:first-child { }
          &:last-child { }
        }
        th {  }
        td {  }
      }
    }
  }

  tbody {
    th, td {
      &:first-child { }
      &:last-child { }
    }
    th {  }
    td {  }

    tr {
      &:first-child {
        th, td {
          &:first-child { }
          &:last-child { }
        }
        th {  }
        td {  }
      }
      &:last-child {
        th, td {
          &:first-child { }
          &:last-child { }
        }
        th {  }
        td {  }
      }
    }
  }


}
