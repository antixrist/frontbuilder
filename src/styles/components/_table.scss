$table-cell-padding: 0.5rem 1rem !default;
$table-cell-padding-between: true !default;
$table-cell-padding-around: false !default;
$table-border-color: #edeef0 !default;

@include c(table-responsive) {
  display: block;
  max-width: 100%;
  overflow-x: auto;
  overflow-y: hidden;
  -ms-overflow-style: -ms-autohiding-scrollbar; // See https://github.com/twbs/bootstrap/pull/10057
}

@mixin table-cells-padding ($padding: 0, $options: between around x y, $cells: 'td, th') {
  $options: if(type-of($options) != list, ($options,), $options);
  $between: index($options, between);
  $around: index($options, around);
  $x: index($options, x);
  $y: index($options, y);

  @if not $between and not $around {
    $between: true;
    $around: true;
  }

  @if not $x and not $y {
    $x: true;
    $y: true;
  }

  #{$cells} {
    @content;

    @if $x and $y and $between and $around {
      padding: $padding;
    } @else {
      $bounds: get-bounds-map($padding);

      @if $x {
        @if $between and $around {
          padding-left: map-get($bounds, left);
          padding-right: map-get($bounds, right);
        }
        @else {
          @if $around and not $between {
            &:first-child { padding-left: map-get($bounds, left); }
            &:last-child { padding-right: map-get($bounds, right); }
          }
          @elseif not $around and $between {
            &:first-child:not(:last-child) { padding-right: map-get($bounds, right); }
            &:last-child:not(:first-child) { padding-left: map-get($bounds, left); }
            &:not(:last-child):not(:first-child) {
              padding-left: map-get($bounds, left);
              padding-right: map-get($bounds, right);
            }
          }
        }
      }

      @if $y {
        @if $between and $around {
          padding-top: map-get($bounds, top);
          padding-bottom: map-get($bounds, bottom);
        }
        @else {
          @if $around and not $between {
            // когда внутри `table` есть только `thead` или только `tbody`, или только `tfoot`
            thead:first-child tr:first-child &,
            tbody:first-child tr:first-child &,
            tfoot:first-child tr:first-child & {
              padding-top: map-get($bounds, top);
            }

            thead:last-child tr:last-child &,
            tbody:last-child tr:last-child &,
            tfoot:last-child tr:last-child & {
              padding-bottom: map-get($bounds, bottom);
            }
          }
          @if not $around and $between {
            thead:first-child:last-child tr:first-child:not(:last-child) &,
            tbody:first-child:last-child tr:first-child:not(:last-child) &,
            tfoot:first-child:last-child tr:first-child:not(:last-child) & {
              padding-bottom: map-get($bounds, bottom);
            }
            thead:last-child:first-child tr:last-child:not(:first-child) &,
            tbody:last-child:first-child tr:last-child:not(:first-child) &,
            tfoot:last-child:first-child tr:last-child:not(:first-child) & {
              padding-top: map-get($bounds, top);
            }
            thead:first-child:last-child tr:not(:first-child):not(:last-child) &,
            tbody:first-child:last-child tr:not(:first-child):not(:last-child) &,
            tfoot:first-child:last-child tr:not(:first-child):not(:last-child) & {
              padding-top: map-get($bounds, top);
              padding-bottom: map-get($bounds, bottom);
            }

            thead:first-child:not(:last-child) &,
            tbody:first-child:not(:last-child) &,
            tfoot:first-child:not(:last-child) &,
            thead:last-child:not(:first-child) tr:not(:last-child) &,
            tbody:last-child:not(:first-child) tr:not(:last-child) &,
            tfoot:last-child:not(:first-child) tr:not(:last-child) & {
              padding-bottom: map-get($bounds, bottom);
            }

            thead:last-child:not(:first-child) &,
            tbody:last-child:not(:first-child) &,
            tfoot:last-child:not(:first-child) &,
            thead:first-child:not(:last-child) tr:not(:first-child) &,
            tbody:first-child:not(:last-child) tr:not(:first-child) &,
            tfoot:first-child:not(:last-child) tr:not(:first-child) & {
              padding-top: map-get($bounds, top);
            }

            thead:not(:first-child):not(:last-child) &,
            tbody:not(:first-child):not(:last-child) &,
            tfoot:not(:first-child):not(:last-child) &,
            thead:not(:last-child):not(:first-child) &,
            tbody:not(:last-child):not(:first-child) &,
            tfoot:not(:last-child):not(:first-child) & {
              padding-top: map-get($bounds, top);
              padding-bottom: map-get($bounds, bottom);
            }
          }
        }
      }
    }
  }
}


@include c(table) {
  //border: none;

  td, th {
    @include font-type(regular);
    text-align: left;
    //border: none;
    vertical-align: top;
    //padding: 0;
  }



  th { @include font-type(bold); }

  thead {
    th, td {
      &:first-child { }
      &:last-child { }
    }
    th { vertical-align: bottom; }
    td {  }

    tr {
      &:first-child {
        th, td {
          &:first-child { }
          &:last-child { }
        }
        th {  }
        td {  }
      }
      &:last-child {
        th, td {
          &:first-child { }
          &:last-child { }
        }
        th {  }
        td {  }
      }
    }
  }

  tbody {
    th, td {
      &:first-child { }
      &:last-child { }
    }
    th {  }
    td {  }

    tr {
      &:first-child {
        th, td {
          &:first-child { }
          &:last-child { }
        }
        th {  }
        td {  }
      }
      &:last-child {
        th, td {
          &:first-child { }
          &:last-child { }
        }
        th {  }
        td {  }
      }
    }
  }


}

th, td {
  padding: 0;
  border: 1px solid #ccc;
}

//@include table-cells-padding($table-cell-padding, around y);
//@include table-cells-padding($table-cell-padding, between y);

//@include table-cells-padding($table-cell-padding, around x);
//@include table-cells-padding($table-cell-padding, between x);

//@include table-cells-padding($table-cell-padding, around);
//@include table-cells-padding($table-cell-padding, between);

//@include table-cells-padding($table-cell-padding, x);
//@include table-cells-padding($table-cell-padding, y);

@include table-cells-padding($table-cell-padding);
