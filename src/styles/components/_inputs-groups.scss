$inputs-group-states: (default, success, danger) !default;
$addons-variants: (
  default: (
    color: $base-color,
    bg-color: #fff,
    border-color: $borders-color,
  ),
  success: (
    color: $color-success-accent,
    bg-color: rgba($color-success-accent, .05),
    border-color: $color-success-accent,
  ),
  danger: (
    color: $color-danger-accent,
    bg-color: rgba($color-danger-accent, .05),
    border-color: $color-danger-accent,
  )
) !default;

.inputs-group {
  //display: flex;

  .addon {
    @each $variant, $data in $addons-variants {
      $selector: if($variant == default, '&', '&.-#{$variant}');
      #{$selector} {
        $args: map-get($addons-variants, $variant);
        @include input-addon-variant($args...);
      }
    }
  }

  > .btn,
  > .addon,
  > .addon-btn { white-space: nowrap; }

  .btn,
  .input {
    @include stack-item-upward(2);

    &:hover,
    &:focus,
    &:active {
      @include stack-item-upward(3);
    }

    &.-upward {
      @include stack-item-upward(4);
    }
  }

  @each $variant in $inputs-group-states {
    $selector: if($variant == default, '&', '&.-has-#{$variant}');

    #{$selector} {
      @if map-has-key($addons-variants, $variant) {
        $args: map-get($addons-variants, $variant);
        .addon { @include input-addon-variant($args...); }
      }

      @if map-has-key($input-variants, $variant) {
        $args: map-get($input-variants, $variant);
        .input {
          @include input-variant($args...);
        }

        @if $variant != default {
          @include stack-item-upward(3);

          &:hover,
          &:focus,
          &:active {
            @include stack-item-upward(4);
          }

          &.-upward {
            @include stack-item-upward(5);
          }
        }
      }
    }
  }

  @each $size, $data in $control-sizes {
    $selector: if($size == default, '&', '&.-size-#{$size}');
    #{$selector} {
      .btn,
      .addon,
      .input {
        //vertical-align: middle;
        //display: inline-block;
      }

      .btn   { @include control-size-preset($size); }
      .addon { @include control-size-preset($size, false); }
      .input { @include control-size-preset($size, false); }
    }
  }

  display: flex;
  min-width: 100%;

  @extend .stack.-x;

  .btn,
  .btn-addon,
  .addon,
  .input {
    @extend .stacked;
  }

  .addon,
  .addon-btn {
    &:first-child {
      border-top-left-radius: $base-radius;
      border-bottom-left-radius: $base-radius;
    }
    &:last-child {
      border-top-right-radius: $base-radius;
      border-bottom-right-radius: $base-radius;
    }
  }

  .input {
    flex: 1;
  }

  // fallback
  .no-flexbox & {
    .btn,
    .addon,
    .input {
      margin: 0;
    }
  }
}
