@mixin table-responsive {
  display: block;
  max-width: 100%;
  overflow-x: auto;
  overflow-y: hidden;
  -ms-overflow-style: -ms-autohiding-scrollbar; // See https://github.com/twbs/bootstrap/pull/10057
}

@mixin table-cells-padding ($padding: 0, $options: between around x y, $cells: 'td, th') {
  $options: if(type-of($options) != list, ($options,), $options);

  $x: not not index($options, x);
  $y: not not index($options, y);
  $top: not not index($options, top);
  $bottom: not not index($options, bottom);
  $left: not not index($options, left);
  $right: not not index($options, right);
  $around: not not index($options, around);
  $nowrap: not not index($options, nowrap);
  // aliases
  $between: not not index($options, between);
  $between: if(not $between, not not index($options, beetween), $between);
  // aliases
  $half-between: not not index($options, half-between);
  $half-between: if(not $half-between, not not index($options, half-beetween), $half-between);
  $half-between: if(not $half-between, not not index($options, between-half), $half-between);
  $half-between: if(not $half-between, not not index($options, beetween-half), $half-between);

  @if $x {
    $left: true;
    $right: true;
  }

  @if $y {
    $top: true;
    $bottom: true;
  }

  @if not $top and not $right and not $bottom and not $left {
    $top: true;
    $bottom: true;
    $left: true;
    $right: true;
  }

  @if not $between and not $around {
    $between: true;
    $around: true;
  }

  #{$cells} { @content; }

  @if $top and $bottom and $left and $right and $around and $between and not $half-between {
    #{$cells} { padding: $padding; }
  } @else {
    $bounds: get-bounds-map($padding);
    $bounds-half: get-bounds-list($bounds);
    $bounds-half: get-bounds-map(
      (nth($bounds-half, 1) /2)
      (nth($bounds-half, 2) /2)
      (nth($bounds-half, 3) /2)
      (nth($bounds-half, 4) /2)
    );

    @if $left or $right {
      @if $between and $around and not $half-between {
        #{$cells} {
          @if $left  { padding-left:  map-get($bounds, left); }
          @if $right { padding-right: map-get($bounds, right); }
        }
      }
      @else {
        @if $between {
          #{$cells} {
            $_bounds: if($half-between, $bounds-half, $bounds);

            @if $right { &:first-child:not(:last-child) { padding-right: map-get($_bounds, right); } }
            @if $left  { &:last-child:not(:first-child) { padding-left:  map-get($_bounds, left); } }

            &:not(:last-child):not(:first-child) {
              @if $left  { padding-left:  map-get($_bounds, left); }
              @if $right { padding-right: map-get($_bounds, right); }
            }
          }
        }

        @if $around {
          #{$cells} {
            @if $left  { &:first-child { padding-left:  map-get($bounds, left); } }
            @if $right { &:last-child  { padding-right: map-get($bounds, right); } }
          }
        }
      }
    }

    @if $top or $bottom {
      @if $between and $around and not $half-between {
        #{$cells} {
          @if $top    { padding-top:    map-get($bounds, top); }
          @if $bottom { padding-bottom: map-get($bounds, bottom); }
        }
      }
      @else {
        @if $around {
          @if $nowrap {
            @if $top    { tr:first-child { #{$cells} { padding-top:    map-get($bounds, top); } } }
            @if $bottom { tr:last-child  { #{$cells} { padding-bottom: map-get($bounds, bottom); } } }
          }
          @else {
            thead, tbody, tfoot {
              @if $top    { &:first-child tr:first-child { #{$cells} { padding-top:    map-get($bounds, top); } } }
              @if $bottom { &:last-child tr:last-child   { #{$cells} { padding-bottom: map-get($bounds, bottom); } } }
            }
          }
        }

        @if $between {
          $bounds: if($half-between, $bounds-half, $bounds);
          @if $nowrap {
            @if $bottom { tr:first-child:not(:last-child) { #{$cells} { padding-bottom: map-get($bounds, bottom); } } }
            @if $top    { tr:last-child:not(:first-child) { #{$cells} { padding-top:    map-get($bounds, top); } } }

            tr:not(:first-child):not(:last-child) {
              #{$cells} {
                @if $top    { padding-top:    map-get($bounds, top); }
                @if $bottom { padding-bottom: map-get($bounds, bottom); }
              }
            }
          }
          @else {
            thead, tbody, tfoot {
              &:first-child:last-child {
                @if $bottom {
                  tr:first-child:not(:last-child) {
                    #{$cells} { padding-bottom: map-get($bounds, bottom); }
                  }
                }
                @if $top {
                  tr:last-child:not(:first-child) {
                    #{$cells} { padding-top: map-get($bounds, top); }
                  }
                }

                tr:not(:first-child):not(:last-child) {
                  #{$cells} {
                    @if $top    { padding-top:    map-get($bounds, top); }
                    @if $bottom { padding-bottom: map-get($bounds, bottom); }
                  }
                }
              }

              @if $bottom {
                &:first-child:not(:last-child),
                &:last-child:not(:first-child) tr:not(:last-child) {
                  #{$cells} { padding-bottom: map-get($bounds, bottom); }
                }
              }

              @if $top {
                &:last-child:not(:first-child),
                &:first-child:not(:last-child) tr:not(:first-child) {
                  #{$cells} { padding-top: map-get($bounds, top); }
                }
              }

              &:not(:first-child):not(:last-child),
              &:not(:last-child):not(:first-child) {
                #{$cells} {
                  @if $top    { padding-top:    map-get($bounds, top); }
                  @if $bottom { padding-bottom: map-get($bounds, bottom); }
                }
              }
            }
          }
        }
      }
    }
  }
}

@mixin table-cells-border ($border: 1px solid black, $options: between around x y, $cells: 'td, th') {
  $options: if(type-of($options) != list, ($options,), $options);
  $x: not not index($options, x);
  $y: not not index($options, y);
  $top: not not index($options, top);
  $bottom: not not index($options, bottom);
  $left: not not index($options, left);
  $right: not not index($options, right);
  $around: not not index($options, around);
  $nowrap: not not index($options, nowrap);
  // aliases
  $between: not not index($options, between);
  $between: if(not $between, not not index($options, beetween), $between);

  @if $x {
    $left: true;
    $right: true;
  }

  @if $y {
    $top: true;
    $bottom: true;
  }

  @if not $top and not $right and not $bottom and not $left {
    $top: true;
    $bottom: true;
    $left: true;
    $right: true;
  }

  @if not $between and not $around {
    $between: true;
    $around: true;
  }

  #{$cells} { @content; }

  @if $top and $bottom and $left and $right and $between and $around {
    #{$cells} { border: $border; }
  } @else {
    @if $left or $right {
      @if $between and $around {
        #{$cells} {
          @if $left  { border-left:  $border; }
          @if $right { border-right: $border; }
        }
      }
      @else {
        @if $around and not $between {
          #{$cells} {
            @if $left  { &:first-child { border-left:  $border; } }
            @if $right { &:last-child  { border-right: $border; } }
          }
        }
        @elseif not $around and $between {
          #{$cells} {
            @if $right { &:first-child:not(:last-child) { border-right: $border; } }
            @if $left  { &:last-child:not(:first-child) { border-left:  $border; } }
            &:not(:last-child):not(:first-child) {
              @if $left  { border-left:  $border; }
              @if $right { border-right: $border; }
            }
          }
        }
      }
    }

    @if $top or $bottom {
      @if $between and $around {
        #{$cells} {
          @if $top    { border-top:    $border; }
          @if $bottom { border-bottom: $border; }
        }
      }
      @else {
        @if $around and not $between {
          @if $nowrap {
            @if $top    { tr:first-child { #{$cells} { border-top:    $border; } } }
            @if $bottom { tr:last-child  { #{$cells} { border-bottom: $border; } } }
          }
          @else {
            thead, tbody, tfoot {
              @if $top    { &:first-child tr:first-child { #{$cells} { border-top:    $border; } } }
              @if $bottom { &:last-child  tr:last-child  { #{$cells} { border-bottom: $border; } } }
            }
          }
        }
        @if not $around and $between {
          @if $nowrap {
            @if $bottom { tr:first-child:not(:last-child) { #{$cells} { border-bottom: $border; } } }
            @if $top    { tr:last-child:not(:first-child) { #{$cells} { border-top:    $border; } } }

            tr:not(:first-child):not(:last-child) {
              #{$cells} {
                @if $top    { border-top:    $border; }
                @if $bottom { border-bottom: $border; }
              }
            }
          }
          @else {
            thead, tbody, tfoot {
              @if $bottom {
                &:first-child:last-child tr:first-child:not(:last-child) {
                  #{$cells} { border-bottom: $border; }
                }
              }

              @if $top {
                &:last-child:first-child tr:last-child:not(:first-child) {
                  #{$cells} { border-top: $border; }
                }
              }

              &:first-child:last-child tr:not(:first-child):not(:last-child) {
                #{$cells} {
                  @if $top    { border-top:    $border; }
                  @if $bottom { border-bottom: $border; }
                }
              }


              @if $bottom {
                &:first-child:not(:last-child),
                &:last-child:not(:first-child) tr:not(:last-child) {
                  #{$cells} { border-bottom: $border; }
                }
              }

              @if $top {
                &:last-child:not(:first-child),
                &:first-child:not(:last-child) tr:not(:first-child) {
                  #{$cells} { border-top: $border; }
                }
              }

              &:not(:first-child):not(:last-child),
              &:not(:last-child):not(:first-child) {
                #{$cells} {
                  @if $top    { border-top:    $border; }
                  @if $bottom { border-bottom: $border; }
                }
              }
            }
          }
        }
      }
    }
  }
}

@mixin table-odd-rows () {

  @content;

  //@if $x and $y and $between and $around {
  //  #{$cells} { border: $border; }
  //} @else {
  //  @if $x {
  //    @if $between and $around {
  //      #{$cells} {
  //        border-left: $border;
  //        border-right: $border;
  //      }
  //    }
  //    @else {
  //      @if $around and not $between {
  //        #{$cells} {
  //          &:first-child { border-left: $border; }
  //          &:last-child { border-right: $border; }
  //        }
  //      }
  //      @elseif not $around and $between {
  //        #{$cells} {
  //          &:first-child:not(:last-child) { border-right: $border; }
  //          &:last-child:not(:first-child) { border-left: $border; }
  //          &:not(:last-child):not(:first-child) {
  //            border-left: $border;
  //            border-right: $border;
  //          }
  //        }
  //      }
  //    }
  //  }
  //
  //  @if $y {
  //    @if $between and $around {
  //      #{$cells} {
  //        border-top: $border;
  //        border-bottom: $border;
  //      }
  //    }
  //    @else {
  //      @if $around and not $between {
  //        // когда внутри `table` есть только `thead` или только `tbody`, или только `tfoot`
  //        thead:first-child tr:first-child,
  //        tbody:first-child tr:first-child,
  //        tfoot:first-child tr:first-child {
  //          #{$cells} { border-top: $border; }
  //        }
  //
  //        thead:last-child tr:last-child,
  //        tbody:last-child tr:last-child,
  //        tfoot:last-child tr:last-child {
  //          #{$cells} { border-bottom: $border; }
  //        }
  //      }
  //      @if not $around and $between {
  //        thead:first-child:last-child tr:first-child:not(:last-child),
  //        tbody:first-child:last-child tr:first-child:not(:last-child),
  //        tfoot:first-child:last-child tr:first-child:not(:last-child) {
  //          #{$cells} { border-bottom: $border; }
  //        }
  //        thead:last-child:first-child tr:last-child:not(:first-child),
  //        tbody:last-child:first-child tr:last-child:not(:first-child),
  //        tfoot:last-child:first-child tr:last-child:not(:first-child) {
  //          #{$cells} { border-top: $border; }
  //        }
  //        thead:first-child:last-child tr:not(:first-child):not(:last-child),
  //        tbody:first-child:last-child tr:not(:first-child):not(:last-child),
  //        tfoot:first-child:last-child tr:not(:first-child):not(:last-child) {
  //          #{$cells} {
  //            border-top: $border;
  //            border-bottom: $border;
  //          }
  //        }
  //
  //        thead:first-child:not(:last-child),
  //        tbody:first-child:not(:last-child),
  //        tfoot:first-child:not(:last-child),
  //        thead:last-child:not(:first-child) tr:not(:last-child),
  //        tbody:last-child:not(:first-child) tr:not(:last-child),
  //        tfoot:last-child:not(:first-child) tr:not(:last-child) {
  //          #{$cells} { border-bottom: $border; }
  //        }
  //
  //        thead:last-child:not(:first-child),
  //        tbody:last-child:not(:first-child),
  //        tfoot:last-child:not(:first-child),
  //        thead:first-child:not(:last-child) tr:not(:first-child),
  //        tbody:first-child:not(:last-child) tr:not(:first-child),
  //        tfoot:first-child:not(:last-child) tr:not(:first-child) {
  //          #{$cells} { border-top: $border; }
  //        }
  //
  //        thead:not(:first-child):not(:last-child),
  //        tbody:not(:first-child):not(:last-child),
  //        tfoot:not(:first-child):not(:last-child),
  //        thead:not(:last-child):not(:first-child),
  //        tbody:not(:last-child):not(:first-child),
  //        tfoot:not(:last-child):not(:first-child) {
  //          #{$cells} {
  //            border-top: $border;
  //            border-bottom: $border;
  //          }
  //        }
  //      }
  //    }
  //  }
  //}
}
