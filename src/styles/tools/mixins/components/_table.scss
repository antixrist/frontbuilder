@mixin table-responsive {
  display: block;
  max-width: 100%;
  overflow-x: auto;
  overflow-y: hidden;
  -ms-overflow-style: -ms-autohiding-scrollbar; // See https://github.com/twbs/bootstrap/pull/10057
}

@mixin table-ears ($options: before left right, $wrap: '> thead tr', $cells: '> td, > th') {
  $options: if(type-of($options) != list, ($options,), $options);
  $nowrap: not not index($options, nowrap);

  $pseudo: if(index($options, before), before, after);
  $pseudo: if(index($options, after), after, before);

  $left:  not not index($options, left);
  $right: not not index($options, right);

  @if not $left and not $right {
    $left:  true;
    $right: true;
  }

  @include proxy(if($nowrap, null, $wrap)) {
    #{$cells} {
      @if $left {
        &:first-child {
          position: relative;

          &:#{$pseudo} {
            content: '\00a0';
            position: absolute;
            top: 0;
            bottom: 0;
            display: block;
            right: 100%;
            left: auto;

            @content;
          }
        }
      }
      @if $right {
        &:last-child {
          position: relative;

          &:#{$pseudo} {
            content: '\00a0';
            position: absolute;
            top: 0;
            bottom: 0;
            display: block;
            left: 100%;
            right: auto;

            @content;
          }
        }
      }
    }
  }
}

@mixin table-cells-padding (
  $padding: 0,
  $options: between around x y,
  $blocks: '> thead, > tbody, > tfoot',
  $rows: '> tr',
  $cells: '> td, > th'
) {
  $options: if(type-of($options) != list, ($options,), $options);

  $x: not not index($options, x);
  $y: not not index($options, y);
  $top: not not index($options, top);
  $bottom: not not index($options, bottom);
  $left: not not index($options, left);
  $right: not not index($options, right);
  $around: not not index($options, around);
  $nowrap: not not index($options, nowrap);
  // aliases
  $between: not not index($options, between);
  $between: if(not $between, not not index($options, beetween), $between);
  // aliases
  $half-between: not not index($options, half-between);
  $half-between: if(not $half-between, not not index($options, half-beetween), $half-between);
  $half-between: if(not $half-between, not not index($options, between-half), $half-between);
  $half-between: if(not $half-between, not not index($options, beetween-half), $half-between);

  $blocks: if(type-of($blocks) == '', null, $blocks);
  $rows:   if(type-of($rows)   == '', null, $rows);
  $cells:  if(type-of($cells)  == '', null, $cells);

  $rows:  if($rows,  $rows,  '> tr');
  $cells: if($cells, $cells, '> th, > td');

  @if $x {
    $left: true;
    $right: true;
  }

  @if $y {
    $top: true;
    $bottom: true;
  }

  @if not $top and not $right and not $bottom and not $left {
    $top: true;
    $bottom: true;
    $left: true;
    $right: true;
  }

  @if not $between and not $around {
    $between: true;
    $around: true;
  }

  @if $top and $bottom and $left and $right and $around and $between and not $half-between {
    #{$cells} { padding: $padding; }
  } @else {
    $bounds: get-bounds-map($padding);
    $bounds-half: get-bounds-list($bounds);
    $bounds-half: get-bounds-map(
      (nth($bounds-half, 1) /2)
      (nth($bounds-half, 2) /2)
      (nth($bounds-half, 3) /2)
      (nth($bounds-half, 4) /2)
    );

    @if $left or $right {
      @if $between and $around and not $half-between {
        #{$blocks} {
          #{$rows} {
            #{$cells} {
              @if $left  { padding-left:  map-get($bounds, left); }
              @if $right { padding-right: map-get($bounds, right); }
            }
          }
        }
      }
      @else {
        @if $between {
          #{$blocks} {
            #{$rows} {
              #{$cells} {
                $_bounds: if($half-between, $bounds-half, $bounds);

                @if $right { &:first-child:not(:last-child) { padding-right: map-get($_bounds, right); } }
                @if $left  { &:last-child:not(:first-child) { padding-left:  map-get($_bounds, left); } }

                &:not(:last-child):not(:first-child) {
                  @if $left  { padding-left:  map-get($_bounds, left); }
                  @if $right { padding-right: map-get($_bounds, right); }
                }
              }
            }
          }
        }

        @if $around {
          #{$blocks} {
            #{$rows} {
              #{$cells} {
                @if $left  { &:first-child { padding-left:  map-get($bounds, left); } }
                @if $right { &:last-child  { padding-right: map-get($bounds, right); } }
              }
            }
          }
        }
      }
    }

    @if $top or $bottom {
      @if $between and $around and not $half-between {
        #{$blocks} {
          #{$rows} {
            #{$cells} {
              @if $top    { padding-top:    map-get($bounds, top); }
              @if $bottom { padding-bottom: map-get($bounds, bottom); }
            }
          }
        }
      }
      @else {
        @if $around {
          @if $nowrap {
            @if $top    { #{$rows} { &:first-child { #{$cells} { padding-top:    map-get($bounds, top); } } } }
            @if $bottom { #{$rows} { &:last-child  { #{$cells} { padding-bottom: map-get($bounds, bottom); } } } }
          }
          @else {
            #{$blocks} {
              @if $top    { &:first-child #{$rows} { &:first-child { #{$cells} { padding-top:    map-get($bounds, top); } } } }
              @if $bottom { &:last-child #{$rows} { &:last-child   { #{$cells} { padding-bottom: map-get($bounds, bottom); } } } }
            }
          }
        }

        @if $between {
          $bounds: if($half-between, $bounds-half, $bounds);
          @if $nowrap {
            @if $bottom { #{$rows} { &:first-child:not(:last-child) { #{$cells} { padding-bottom: map-get($bounds, bottom); } } } }
            @if $top    { #{$rows} { &:last-child:not(:first-child) { #{$cells} { padding-top:    map-get($bounds, top); } } } }

            #{$rows} {
              &:not(:first-child):not(:last-child) {
                #{$cells} {
                  @if $top    { padding-top:    map-get($bounds, top); }
                  @if $bottom { padding-bottom: map-get($bounds, bottom); }
                }
              }
            }
          }
          @else {
            #{$blocks} {
              &:first-child:last-child {
                @if $bottom {
                  #{$rows} {
                    &:first-child:not(:last-child) {
                      #{$cells} { padding-bottom: map-get($bounds, bottom); }
                    }
                  }
                }
                @if $top {
                  #{$rows} {
                    &:last-child:not(:first-child) {
                      #{$cells} { padding-top: map-get($bounds, top); }
                    }
                  }
                }

                #{$rows} {
                  &:not(:first-child):not(:last-child) {
                    #{$cells} {
                      @if $top    { padding-top:    map-get($bounds, top); }
                      @if $bottom { padding-bottom: map-get($bounds, bottom); }
                    }
                  }
                }
              }

              @if $bottom {
                &:first-child:not(:last-child),
                &:last-child:not(:first-child) {
                  #{$rows} {
                    &,
                    &:not(:last-child) {
                      #{$cells} { padding-bottom: map-get($bounds, bottom); }
                    }
                  }
                }
              }

              @if $top {
                &:last-child:not(:first-child),
                &:first-child:not(:last-child) {
                  #{$rows} {
                    &:not(:first-child) {
                      #{$cells} { padding-top: map-get($bounds, top); }
                    }
                  }
                }
              }

              &:not(:first-child):not(:last-child),
              &:not(:last-child):not(:first-child) {
                #{$rows} {
                  #{$cells} {
                    @if $top    { padding-top:    map-get($bounds, top); }
                    @if $bottom { padding-bottom: map-get($bounds, bottom); }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

@mixin table-cells-border (
  $border: 1px solid black,
  $options: between around x y,
  $blocks: '> thead, > tbody, > tfoot',
  $rows: '> tr',
  $cells: '> td, > th'
) {
  $options: if(type-of($options) != list, ($options,), $options);
  $x: not not index($options, x);
  $y: not not index($options, y);
  $top: not not index($options, top);
  $bottom: not not index($options, bottom);
  $left: not not index($options, left);
  $right: not not index($options, right);
  $around: not not index($options, around);
  $nowrap: not not index($options, nowrap);
  // aliases
  $between: not not index($options, between);
  $between: if(not $between, not not index($options, betwen), $between);
  $between: if(not $between, not not index($options, beetween), $between);

  $blocks: if(type-of($blocks) == '', null, $blocks);
  $rows:   if(type-of($rows)   == '', null, $rows);
  $cells:  if(type-of($cells)  == '', null, $cells);

  $rows:  if($rows,  $rows,  '> tr');
  $cells: if($cells, $cells, '> th, > td');

  @if $x {
    $left: true;
    $right: true;
  }

  @if $y {
    $top: true;
    $bottom: true;
  }

  @if not $top and not $right and not $bottom and not $left {
    $top: true;
    $bottom: true;
    $left: true;
    $right: true;
  }

  @if not $between and not $around {
    $between: true;
    $around: true;
  }

  @if $top and $bottom and $left and $right and $between and $around {
    @if not $blocks {
      #{$rows} { #{$cells} { border: $border; } }
    } @else {
      #{$blocks} { #{$rows} { #{$cells} { border: $border; } } }
    }
  } @else {
    @if $left or $right {
      @if $between and $around {
        @if not $blocks {
          #{$rows} {
            #{$cells} {
              @if $left  { border-left:  $border; }
              @if $right { border-right: $border; }
            }
          }
        } @else {
          #{$blocks} {
            #{$rows} {
              #{$cells} {
                @if $left  { border-left:  $border; }
                @if $right { border-right: $border; }
              }
            }
          }
        }
      } @else {
        @if $around and not $between {
          @if not $blocks {
            #{$rows} {
              #{$cells} {
                @if $left  { &:first-child { border-left:  $border; } }
                @if $right { &:last-child  { border-right: $border; } }
              }
            }
          } @else {
            #{$blocks} {
              #{$rows} {
                #{$cells} {
                  @if $left  { &:first-child { border-left:  $border; } }
                  @if $right { &:last-child  { border-right: $border; } }
                }
              }
            }
          }
        }
        @elseif not $around and $between {
          @if not $blocks {
            #{$rows} {
              #{$cells} {
                @if $right { &:first-child:not(:last-child) { border-right: $border; } }
                @if $left  { &:last-child:not(:first-child) { border-left:  $border; } }
                &:not(:last-child):not(:first-child) {
                  @if $left  { border-left:  $border; }
                  @if $right { border-right: $border; }
                }
              }
            }
          } @else {
            #{$blocks} {
              #{$rows} {
                #{$cells} {
                  @if $right { &:first-child:not(:last-child) { border-right: $border; } }
                  @if $left  { &:last-child:not(:first-child) { border-left:  $border; } }
                  &:not(:last-child):not(:first-child) {
                    @if $left  { border-left:  $border; }
                    @if $right { border-right: $border; }
                  }
                }
              }
            }
          }
        }
      }
    }

    @if $top or $bottom {
      @if $between and $around {
        @if not $blocks {
          #{$rows} {
            #{$cells} {
              @if $top    { border-top:    $border; }
              @if $bottom { border-bottom: $border; }
            }
          }
        } @else {
          #{$blocks} {
            #{$rows} {
              #{$cells} {
                @if $top    { border-top:    $border; }
                @if $bottom { border-bottom: $border; }
              }
            }
          }
        }
      } @else {
        @if $around and not $between {
          @if not $blocks {
            @if $top    { #{$rows} { &:first-child { #{$cells} { border-top:    $border; } } } }
            @if $bottom { #{$rows} { &:last-child  { #{$cells} { border-bottom: $border; } } } }
          } @else {
            #{$blocks} {
              @if $top    { &:first-child { #{$rows} { &:first-child { #{$cells} { border-top:    $border; } } } } }
              @if $bottom { &:last-child  { #{$rows} { &:last-child  { #{$cells} { border-bottom: $border; } } } } }
            }
          }
        }
        @if not $around and $between {
          @if not $blocks {
            @if $bottom { #{$rows} { &:first-child:not(:last-child) { #{$cells} { border-bottom: $border; } } } }
            @if $top    { #{$rows} { &:last-child:not(:first-child) { #{$cells} { border-top:    $border; } } } }

            #{$rows} {
              &:not(:first-child):not(:last-child) {
                #{$cells} {
                  @if $top    { border-top:    $border; }
                  @if $bottom { border-bottom: $border; }
                }
              }
            }
          } @else {
            #{$blocks} {
              @if $bottom {
                &:first-child:last-child {
                  #{$rows} {
                    &:first-child:not(:last-child) {
                      #{$cells} { border-bottom: $border; }
                    }
                  }
                }
              }

              @if $top {
                &:last-child:first-child {
                  #{$rows} {
                    &:last-child:not(:first-child) {
                      #{$cells} { border-top: $border; }
                    }
                  }
                }
              }

              &:first-child:last-child {
                #{$rows} {
                  &:not(:first-child):not(:last-child) {
                    #{$cells} {
                      @if $top    { border-top:    $border; }
                      @if $bottom { border-bottom: $border; }
                    }
                  }
                }
              }

              @if $bottom {
                &:first-child:not(:last-child),
                &:last-child:not(:first-child) {
                  #{$rows} {
                    &,
                    &:not(:last-child) { #{$cells} { border-bottom: $border; } }
                  }
                }
              }

              @if $top {
                &:last-child:not(:first-child),
                &:first-child:not(:last-child) {
                  #{$rows} {
                    &,
                    &:not(:first-child) { #{$cells} { border-top: $border; } }
                  }
                }
              }

              &:not(:first-child):not(:last-child),
              &:not(:last-child):not(:first-child) {
                #{$rows} {
                  #{$cells} {
                    @if $top    { border-top:    $border; }
                    @if $bottom { border-bottom: $border; }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
