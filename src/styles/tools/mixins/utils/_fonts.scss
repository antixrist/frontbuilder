//////////////////////////////////////////////////////////////
//  https://gist.github.com/jacrook/9009655
//  Font Variables (http://cssfontstack.com/)
//////////////////////////////////////////////////////////////
$font-stacks: () !default;
$font-types: () !default;

$font-stacks-defaults: (
  //systems: (-apple-system, BlinkMacSystemFont, 'avenir next', avenir, helvetica, 'helvetica neue', Ubuntu, 'segoe ui', arial, sans-serif),
  systems: (
    -apple-system, BlinkMacSystemFont, /* MacOS and iOS */
    'avenir next', avenir, /* MacOS and iOS */
    'Segoe UI', /* Windows */
    'lucida grande', /* Older MacOS */
    'helvetica neue', helvetica, /* Older MacOS */
    'Fira Sans', /* Firefox OS */
    roboto, noto, /* Google stuff */
    'Droid Sans', /* Old Google stuff */
    cantarell, oxygen, ubuntu, /* Linux stuff */
    'franklin gothic medium', 'century gothic', /* Windows stuff */
    'Liberation Sans', /* Linux */
    sans-serif /* Everything else */
  ),

  //
  // Serif font-stacks
  //
  baskerville: (Baskerville, 'Baskerville Old Face', 'Hoefler Text', Garamond, 'Times New Roman', serif),
  big-caslon: ('Big Caslon', 'Book Antiqua', 'Palatino Linotype', Georgia, serif),
  bodoni-mt: ('Bodoni MT', Didot, 'Didot LT STD', 'Hoefler Text', Garamond, 'Times New Roman', serif),
  book-antiqua: ('Book Antiqua', Palatino, 'Palatino Linotype', 'Palatino LT STD', Georgia, serif),
  calisto-mt: ("Calisto MT", "Bookman Old Style", Bookman, "Goudy Old Style", Garamond, "Hoefler Text", "Bitstream Charter", Georgia, serif),
  cambria: (Cambria, Georgia, serif),
  didot: (Didot, "Didot LT STD", "Hoefler Text", Garamond, "Times New Roman", serif),
  garamond: (Garamond, Baskerville, "Baskerville Old Face", "Hoefler Text", "Times New Roman", serif),
  georgia: (Georgia, Times, "Times New Roman", serif),
  goudy-old-style: ("Goudy Old Style", Garamond, "Big Caslon", "Times New Roman", serif),
  hoefler-text: ("Hoefler Text", "Baskerville old face", Garamond, "Times New Roman", serif),
  lucidia-bright: ("Lucida Bright", Georgia, serif),
  palatino: (Palatino, "Palatino Linotype", "Palatino LT STD", "Book Antiqua", Georgia, serif),
  perpetua: (Perpetua, Baskerville, "Big Caslon", "Palatino Linotype", Palatino, "URW Palladio L", "Nimbus Roman No9 L", serif),
  rockwell: (Rockwell, "Courier Bold", Courier, Georgia, Times, "Times New Roman", serif),
  rockwell-bold: ("Rockwell Extra Bold", "Rockwell Bold", monospace),
  times-new-roman: (TimesNewRoman, "Times New Roman", Times, Baskerville, Georgia, serif),

  //
  // Sans-Serif font-stacks
  //
  arial: (Arial, "Helvetica Neue", Helvetica, sans-serif),
  arial-black: ("Arial Black", "Arial Bold", Gadget, sans-serif),
  arial-narrow: ("Arial Narrow", Arial, sans-serif),
  arial-rounded: ("Arial Rounded MT Bold", "Helvetica Rounded", Arial, sans-serif),
  avant-garde: ("Avant Garde", Avantgarde, "Century Gothic", CenturyGothic, "AppleGothic", sans-serif),
  calibri: (Calibri, Candara, Segoe, "Segoe UI", Optima, Arial, sans-serif),
  candara: (Candara, Calibri, Segoe, "Segoe UI", Optima, Arial, sans-serif),
  century-gothic: ("Century Gothic", CenturyGothic, AppleGothic, sans-serif),
  frankin-gothic: ("Franklin Gothic Medium", "Franklin Gothic", "ITC Franklin Gothic", Arial, sans-serif),
  futura: (Futura, "Trebuchet MS", Arial, sans-serif),
  geneva: (Geneva, Tahoma, Verdana, sans-serif),
  gill-sans: ("Gill Sans", "Gill Sans MT", Calibri, sans-serif),
  helvetica: ("Helvetica Neue", Helvetica, Arial, sans-serif),
  optima: (Optima, Segoe, 'Segoe UI', Candara, Calibri, Arial, sans-serif),
  impact: (Impact, Haettenschweiler, "Franklin Gothic Bold", Charcoal, "Helvetica Inserat", "Bitstream Vera Sans Bold", "Arial Black", sans-serif),
  lucida-grande: ("Lucida Grande", "Lucida Sans Unicode", "Lucida Sans", Geneva, Verdana, sans-serif),
  segoe: ('Segoe UI', Frutiger, 'Frutiger Linotype', 'Dejavu Sans', 'Helvetica Neue', Arial, sans-serif),
  tahoma: (Tahoma, Verdana, Segoe, sans-serif),
  trebuchet: ('Trebuchet MS', 'Lucida Grande', 'Lucida Sans Unicode', 'Lucida Sans', Tahoma, sans-serif),
  verdana: (Verdana, Geneva, sans-serif),

  //
  // Monospaced font-stacks
  //
  consolas: (Consolas, monaco, monospace),
  courier: ('Courier New', Courier, 'Lucida Sans Typewriter', 'Lucida Typewriter', monospace),
  lucida-console: ('Lucida Console', 'Lucida Sans Typewriter', monaco, 'Bitstream Vera Sans Mono', monospace),
  lucida-sans-typewriter: ('Lucida Sans Typewriter', 'Lucida Console', monaco, 'Bitstream Vera Sans Mono', monospace),
  monaco: (monaco, Consolas, 'Lucida Console', monospace),
  andale: ('Andale Mono', AndaleMono, monospace)
);

$font-types-defaults: (
  regular: (weight: 400, style: normal),
  bold: (weight: 700, style: normal),
  italic: (weight: 400, style: italic),
  bold-italic: (weight: 700, style: italic)
);

$font-stacks: map-merge($font-stacks-defaults, $font-stacks);
$font-types: map-merge($font-types, $font-types);


@function font-stack ($name) {
  $stack: map-get($font-stacks, $name);
  $stack: if(type_of($stack) == list, $stack, ());

  @return $stack;
}

@function font ($names: (), $stack: systems) {
  $names: if(type_of($names != list), ($names,), $names);

  $needle-fonts: ();
  @each $font in $names { $needle-fonts: append($needle-fonts, $font, comma); }
  $names: $needle-fonts;

  $stack: font-stack($stack);

  @return _uniq(_flatten(join($names, $stack, comma)));
}

@mixin font-type ($type: regular) {
  @if (map-get($font-types, $type) != null) {
    $font-type: map-get($font-types, $type);

    font-weight: map-get($font-type, weight);
    font-style: map-get($font-type, style);
  }
}

@mixin font ($names: (), $stack: systems, $type: regular) {
  font-family: font($names, $stack);
  @include font-type($type);
}

///
/// Fool-proof @font-face
/// Based on http://coding.smashingmagazine.com/2013/02/14/setting-weights-and-styles-at-font-face-declaration/
/// See here: http://codepen.io/javasteve99/pen/hDxpn?editors=110
@mixin font-faces ($font-family, $file-path, $font-weight: 400, $font-style: normal, $types: eot woff woff2 ttf otf svg) {
  @if length($types) > 0 {
    $eot: not not index($types, eot);
    $ttf: not not index($types, ttf);
    $otf: not not index($types, otf);
    $svg: not not index($types, svg);
    $svgz: not not index($types, svgz);
    $woff: not not index($types, woff);
    $woff2: not not index($types, woff2);

    $src: ();
    @if $eot   { $src: append($src, url('#{$file-path}.eot?#iefix') format('embedded-opentype'), comma); }
    @if $woff  { $src: append($src, url('#{$file-path}.woff') format('woff'), comma); }
    @if $woff2 { $src: append($src, url('#{$file-path}.woff2') format('woff2'), comma); }
    @if $ttf   { $src: append($src, url('#{$file-path}.ttf') format('truetype'), comma); }
    @if $otf   { $src: append($src, url('#{$file-path}.otf') format('opentype'), comma); }
    @if $svg   { $src: append($src, url('#{$file-path}.svg##{$font-family}') format('svg'), comma); }
    @if $svgz  { $src: append($src, url('#{$file-path}.svgz##{$font-family}') format('svgz'), comma); }

    @font-face {
      font-family: $font-family;
      @if $eot { src: url('#{$file-path}.eot'); }
      src: $src;
      font-weight: $font-weight;
      font-style: $font-style;
    }
    @if $svg or $svgz {
      // Chrome for Windows rendering fix: http://www.adtrak.co.uk/blog/font-face-chrome-rendering/
      @media screen and (-webkit-min-device-pixel-ratio: 0) {
        @font-face {
          font-family: $font-family;
          @if $svg  { src: url('#{$file-path}.svg##{$font-family}') format('svg'); }
          @if $svgz { src: url('#{$file-path}.svgz##{$font-family}') format('svgz'); }
        }
      }
    }
  }
}