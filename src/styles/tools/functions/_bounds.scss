@function get-bounds-map ($list) {
  @if (type_of($list) == map) {
    @return $list;
  }

  $list: if(type_of($list) == list, $list, ($list,));
  $length: length($list);

  $x:      null;
  $y:      null;
  $top:    null;
  $right:  null;
  $bottom: null;
  $left:   null;

  @if $length == 1 {
    $top: nth($list, 1);
    $right: $top;
    $bottom: $top;
    $left: $top;
  }
  @elseif $length == 2 {
    $top: nth($list, 1);
    $right: nth($list, 2);
    $bottom: $top;
    $left: $right;
  }
  @elseif $length == 3 {
    $top: nth($list, 1);
    $right: nth($list, 2);
    $bottom: nth($list, 3);
    $left: $right;
  }
  @elseif $length == 4 {
    $top: nth($list, 1);
    $right: nth($list, 2);
    $bottom: nth($list, 3);
    $left: nth($list, 4);
  }

  @if ($top != null and $top == $bottom) {
    $y: $top;
  }
  @if ($right != null and $right == $left) {
    $x: $right;
  }

  $bounds: (
    x:      $x,
    y:      $y,
    top:    $top,
    right:  $right,
    bottom: $bottom,
    left:   $left,
  );

  $remove-keys: ();
  @each $side, $size in $bounds {
    @if $size == null {
      $remove-keys: append($remove-keys, $side);
    }
  }

  $bounds: map-remove($bounds, $remove-keys...);

  @return $bounds;
}

@function get-bounds-list ($map) {
  @if (type_of($map) != map) {
    @return if(type_of($map) == list, $map, ($map,));
  }

  $x:      _get($map, x);
  $y:      _get($map, y);
  $top:    _get($map, top);
  $right:  _get($map, right);
  $bottom: _get($map, bottom);
  $left:   _get($map, left);

  $list: $top $right $bottom $left;

  @if $x != null {
    $list: set-nth($list, 2, $x);
    $list: set-nth($list, 4, $x);
  }

  @if $y != null {
    $list: set-nth($list, 1, $y);
    $list: set-nth($list, 3, $y);
  }

  @return $list;
}
