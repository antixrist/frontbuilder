@function _get-warning ($warn, $get, $key) {
  @if $get == null {
    @warn '[_get]: map has no value for key search `#{$warn}`';
  }

  @else if type-of($get) != 'map' {
    @warn '[_get]: non-map value found for key search `#{$warn}`, can not search for key `#{$key}`';
  }

  @return null;
}

@function _get ($map, $keys...) {
  @if length($keys) == 1 {
    $keys: nth($keys, 1);
  }

  $warn: '#{nth($keys, 1)}';
  $length: length($keys);
  $get: map-get($map, nth($keys, 1));

  @if $length > 1 {
    @for $i from 2 through $length {
      @if $get != null and type-of($get) == 'map' {
        $warn: $warn + '->#{nth($keys, $i)}';
        $get: map-get($get, nth($keys, $i));

        @if $get == null {
          @return _get-warning($warn, $get, nth($keys, $i));
        }
      }

      @else {
        @return _get-warning($warn, $get, nth($keys, $i));
      }
    }
  }

  @return $get;
}

@function _flatten ($lists...) {
  $retVal: ();

  @each $item in $lists {
    @if type_of($item) == list {
      @each $_item in $item {
        $retVal: join($retVal, _flatten($_item), list-separator($item));
      }
    } @else {
      $retVal: append($retVal, $item, list-separator($lists));
    }
  }

  @return $retVal;
}

@function _uniq ($list) {
  @if type_of($list) != list {
    @return $list;
  }

  $retVal: ();
  $separator: list-separator($list);

  @each $item in $list {
    @if index($retVal, $item) == null {
      $retVal: append($retVal, $item, $separator);
    }
  }


  @return $retVal;
}
